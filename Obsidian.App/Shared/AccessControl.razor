@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using System.Text.Json

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject HttpClient HttpClient
@inject IAccessTokenProvider AccessTokenProvider

<ul class="navbar-nav d-flex justify-content-between me-auto mb-2 mb-md-0 ms-auto">
	<AuthorizeView>
		<Authorized>
			<li class="nav-item">
				<NavLink class="nav-link" href="#" title="Profile" Match="NavLinkMatch.All">
					<img src="@profilePictureUrl" alt="@context.User.Identity.Name" />
				</NavLink>
			</li>
			<li class="nav-item">
				<NavLink class="nav-link" href="#" title="Logout" @onclick="BeginSignOut" Match="NavLinkMatch.All">
					<span class="oi oi-account-logout" aria-hidden="true"></span>
				</NavLink>
			</li>
		</Authorized>
		<NotAuthorized>
			<li class="nav-item">
				<NavLink class="nav-link" href="authentication/login" title="Login" Match="NavLinkMatch.All">
					<span class="oi oi-account-login" aria-hidden="true"></span>
				</NavLink>
			</li>
		</NotAuthorized>
	</AuthorizeView>
</ul>

@code{
	private string profilePictureUrl;

	private async Task BeginSignOut(MouseEventArgs args)
	{
		await SignOutManager.SetSignOutState();
		Navigation.NavigateTo("authentication/logout");
	}

	protected override async Task OnInitializedAsync()
	{
		var accessTokenResult = await AccessTokenProvider.RequestAccessToken();

		if (accessTokenResult.TryGetToken(out var accessToken))
		{
			HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken.Value);

			var response = await HttpClient.GetAsync("https://discord.com/api/users/@me");

			if (response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadAsStringAsync();
				var user = JsonSerializer.Deserialize<DiscordUser>(content);

				if (user != null)
					profilePictureUrl = $"https://cdn.discordapp.com/avatars/{user.Id}/{user.Avatar}.png";
			}
		}
	}

	private class DiscordUser
	{
		public string Id { get; set; }
		public string Avatar { get; set; }
	}
}